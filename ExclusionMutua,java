import java.util.concurrent.Semaphore;

public class ExclusionMutua {
    // Recurso compartido
    private static int recursoCompartido = 0;

    // Creación de un semáforo binario (solo un hilo puede acceder a la vez)
    private static Semaphore semaforo = new Semaphore(1);

    public static void main(String[] args) {
        // Creación de hilos
        Thread hilo1 = new Thread(new Tarea("Hilo 1"));
        Thread hilo2 = new Thread(new Tarea("Hilo 2"));
        Thread hilo3 = new Thread(new Tarea("Hilo 3"));

        // Iniciar hilos
        hilo1.start();
        hilo2.start();
        hilo3.start();
    }

    // Clase interna que define la tarea de cada hilo
    static class Tarea implements Runnable {
        private String nombreHilo;

        public Tarea(String nombreHilo) {
            this.nombreHilo = nombreHilo;
        }

        @Override
        public void run() {
            try {
                System.out.println(nombreHilo + " está intentando acceder a la sección crítica.");
                // Adquirir el semáforo
                semaforo.acquire();
                System.out.println(nombreHilo + " ha accedido a la sección crítica.");
                
                // Simular modificación del recurso compartido
                int valor = recursoCompartido;
                Thread.sleep((long) (Math.random() * 1000)); // Simular proceso
                recursoCompartido = valor + 1;
                
                System.out.println(nombreHilo + " ha modificado el recurso compartido. Nuevo valor: " + recursoCompartido);
                
            } catch (InterruptedException e) {
                e.printStackTrace();
            } finally {
                // Liberar el semáforo
                semaforo.release();
                System.out.println(nombreHilo + " ha salido de la sección crítica.");
            }
        }
    }
}
